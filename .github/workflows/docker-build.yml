name: Package Building

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      SDK_IMAGE:
        type: choice
        description: SDK image (must match architecture)
        required: true
        options:
        - andreien/openwrtsdk:22.03.5-armvirt-32
        - andreien/openwrtsdk:22.03.5-armvirt-64
        - andreien/openwrtsdk:22.03.5-x86-generic
        - andreien/openwrtsdk:22.03.5-x86-geode
        - andreien/openwrtsdk:22.03.5-x86-64
      ROOTFS_IMAGE:
        type: choice
        description: Rootfs image (must match architecture)
        required: true
        options:
        - openwrt/rootfs:arm_cortex-a15_neon-vfpv4-openwrt-23.05
        - openwrt/rootfs:aarch64_cortex-a53-23.05.0-rc1
        - openwrt/rootfs:x86-generic-openwrt-23.05
        - openwrt/rootfs:x86-geode-openwrt-23.05
        - openwrt/rootfs:x86-64-openwrt-23.05
      ARCH:
        type: choice
        description: Architecture
        required: true
        options:
        - arm_cortex-a15_neon-vfpv4
        - aarch64_cortex-a53
        - i386_pentium4
        - i386_pentium-mmx
        - x86_64
      IPK_NAME:
        type: string
        required: true
        description: The name of the IPK file (example, helloworld_1.0-1_aarch64_cortex-a53.ipk)
      PACK_NAME:
        type: string
        required: true
        description: The name of the package (example, helloworld)
env:
  GIT_URL: "https://github.com/zoobab/openwrt_helloworld"
  PACK_NAME: "helloworld"
  SDK_IMAGE: "andreien/openwrtsdk:22.03.5-armvirt-64"
  UPLOAD_REPO: "https://github.com/ndren/openwrtsdkbuild/releases/download/latest"
  IPK_START: "helloworld_1.0-1_"
  OPENWRT_ROOTFS_TAG: "aarch64_cortex-a53-23.05.0-rc1"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: |
        if [ ${{ inputs.SDK_IMAGE }} ]; then
        DOCKER_BUILDKIT=1 docker build --output type=local,dest=artifacts --build-arg GIT_URL="$GIT_URL" --build-arg PACK_NAME="$PACK_NAME" --build-arg SDK_IMAGE=${{ inputs.SDK_IMAGE }} .
        fi
        
        sed '/^#/d' architecture-map | while read -r ARCH_SPEC
        do
          SDK_IMAGE=$(echo -n "$ARCH_SPEC" | cut -d'|' -f1)
          DOCKER_BUILDKIT=1 docker build --output type=local,dest=artifacts --build-arg GIT_URL="$GIT_URL" --build-arg PACK_NAME="$PACK_NAME" --build-arg SDK_IMAGE="$SDK_IMAGE" .
        done
        
        find /home/runner/work/openwrtsdkbuild/openwrtsdkbuild/artifacts/packages/*/*/*.ipk
        zcat /home/runner/work/openwrtsdkbuild/openwrtsdkbuild/artifacts/packages/*/*/Packages.gz | gzip >/home/runner/work/Packages.gz
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        title: "Package release"
        files: |
            /home/runner/work/openwrtsdkbuild/openwrtsdkbuild/artifacts/packages/*/*/*.ipk
            /home/runner/work/Packages.gz
      
  test:
  
    needs: build
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-qemu-action@v2
    - name: Test the Docker image
      run: |
        sed '/^#/d' architecture-map | while read -r ARCH_SPEC
        do
          ROOTFS_IMAGE=$(echo -n "$ARCH_SPEC" | cut -d'|' -f2)
          ARCH=$(echo -n "$ARCH_SPEC" | cut -d'|' -f3)
          export IPK_NAME="$IPK_START$ARCH.ipk"
          docker run -e UPLOAD_REPO -e IPK_NAME -e PACK_NAME "${ROOTFS_IMAGE}" /bin/sh -c "$(cat test-gh-release.sh)"
        done

        if [ ${{ inputs.SDK_IMAGE }} ]; then
        IPK_NAME=${{ inputs.IPK_NAME }}
        PACK_NAME=${{ inputs.PACK_NAME }}
        ROOTFS_IMAGE=${{ inputs.ROOTFS_IMAGE }}
        docker run -e UPLOAD_REPO -e IPK_NAME -e PACK_NAME "${ROOTFS_IMAGE}" /bin/sh -c "$(cat test-gh-release.sh)"
        fi
