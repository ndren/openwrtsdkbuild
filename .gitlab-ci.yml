# First build, then test the package install is working.
stages:
  - build
  - test-install
docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - |
#    - export giturl="https://github.com/zoobab/openwrt_helloworld"
#    - export packname="helloworld"
#    - export sdk_image="zoobab/openwrtsdk:21.02.0-rc4-sunxi-cortexa53"
    - docker build --output type=local,dest=artifacts --build-arg GIT_URL="$GIT_URL" --build-arg PACK_NAME="$PACK_NAME" --build-arg SDK_IMAGE="$SDK_IMAGE" .
    - apk update
    - apk add curl
    - find "artifacts/packages/" # Useful in case you have the wrong folder
    - cd "artifacts/${UPLOAD_SOURCE}"
    - for file in *; do curl -vv --user "usernameisnotimportant:${PERSONAL_ACCESS_TOKEN}" --upload-file $file "https://${UPLOAD_REPO}/${file}"; done

  artifacts:
    paths:
      - artifacts/
test-install:
  image: debian:latest
  stage: test-install
  script:
    - dpkg --add-architecture "${DPKG_ARCH}"
    - apt update
    - apt install -y curl libarchive-tools binfmt-support qemu-user-static "libc6:${DPKG_ARCH}"
    - curl -L --fail "https://downloads.openwrt.org/releases/22.03.5/targets/${ARCH}/${SUBARCH}/openwrt-22.03.5-${ARCH}-${SUBARCH}-rootfs.tar.gz" -o rootfs.tar.gz\
     || curl -L --fail "https://downloads.openwrt.org/releases/22.03.5/targets/${ARCH}/${SUBARCH}/openwrt-22.03.5-${ARCH}-${SUBARCH}-rootfs.cpio.gz" -o rootfs.cpio.gz
    - bsdtar -xpf rootfs.tar.gz || bsdtar -xpf rootfs.cpio.gz
    - chroot . /bin/sh -c "sed -i 's/https/http/g' /etc/opkg/distfeeds.conf"
    - chroot . /bin/sh -c "sed -i '/check_signature/s/^/#/g' /etc/opkg.conf"
    - chroot . /bin/sh -c "mkdir -p /var/lock/ && touch /var/lock/opkg.lock"
    - rm -f ./etc/resolv.conf && cp /etc/resolv.conf ./etc/resolv.conf
    - chroot . /bin/sh -c "opkg update"
    - chroot . /bin/sh -c "opkg install wget-ssl"
    - chroot . /bin/sh -c "echo 'src/gz myrepo http://usernameisnotimportant:${PERSONAL_ACCESS_TOKEN}@${UPLOAD_REPO}' >> /etc/opkg/customfeeds.conf"
    - chroot . /bin/sh -c "opkg update"
    - chroot . /bin/sh -c "opkg install '${PACK_NAME}'"
    # Optionally run PACK_NAME
    - chroot . /bin/sh -c "'${PACK_NAME}'"

variables:
  PACK_NAME:
    description: "Name of the package directory inside the git repo"
    value: "helloworld"
  GIT_URL:
    description: "GIT URL"
    value: "https://github.com/zoobab/openwrt_helloworld"
  UPLOAD_SOURCE:
    description: "The source folder to upload artifacts from"
    value: "packages/aarch64_cortex-a53/myrepo/"
    options:
      - "packages/aarch64_cortex-a53/myrepo/"
      - "packages/x86_64/myrepo/"
  UPLOAD_REPO:
    description: "The GitLab generic package repo to push to"
    value: "gitlab.com/api/v4/projects/${GITLAB_USER_NAME}%2Fopenwrtsdkbuild/packages/generic/armvirt_64/0.0.3/"
  SDK_IMAGE:
    description: "SDK Docker Image"
    value: "zoobab/openwrtsdk:21.02.0-rc4-armvirt-64"
    options:
      - "zoobab/openwrtsdk:21.02.0-rc4-sunxi-cortexa53"
      - "zoobab/openwrtsdk:21.02.0-rc4-imx6-generic"
      - "zoobab/openwrtsdk:21.02.0-rc4-bcm27xx-bcm2708"
      - "zoobab/openwrtsdk:21.02.0-rc4-armvirt-64"
      - "zoobab/openwrtsdk:21.02.0-rc4-x86-64"
  DPKG_ARCH:
   description: "Architecture specification, in debian format"
   value: "arm64"
   options:
     - "amd64"
     - "arm64"
  ARCH:
    description: "Architecture specification, in openwrt format"
    value: "armvirt"
    options:
      - "x86"
      - "armvirt"
  SUBARCH:
    description: "Subarchitecture specification, in openwrt format"
    value: "64"
    options:
      - "64"
      - "32"
