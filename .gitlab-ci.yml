# First build, then test the package install is working.
stages:
  - build
  - test-install
docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - |
#    - export giturl="https://github.com/zoobab/openwrt_helloworld"
#    - export packname="helloworld"
#    - export sdk_image="zoobab/openwrtsdk:21.02.0-rc4-sunxi-cortexa53"
    - docker build --output type=local,dest=artifacts --build-arg GIT_URL="$GIT_URL" --build-arg PACK_NAME="$PACK_NAME" --build-arg SDK_IMAGE="$SDK_IMAGE" .
    - apk update
    - apk add curl
    - find "artifacts/packages/" # Useful in case you have the wrong folder
    - cd "artifacts/${UPLOAD_SOURCE}"
    - for file in *; do curl -L --user "usernameisnotimportant:${PERSONAL_ACCESS_TOKEN}" --upload-file $file "https://${UPLOAD_REPO}/${file}"; done

  artifacts:
    paths:
      - artifacts/
test-install:
  image: docker:latest
  stage: test-install
  services:
    - docker:dind
  script:
    - apk update
    - apk add curl
    - curl https://gitlab.com/${GITLAB_USER_NAME}/openwrtsdkbuild/-/raw/master/ci-test-install.sh -o ci-test-install.sh
    - docker run -e PERSONAL_ACCESS_TOKEN -e UPLOAD_REPO -e PACK_NAME --platform "${DOCKER_PLATFORM}" "openwrt/rootfs:${OPENWRT_ROOTFS_TAG}" /bin/sh -c "$(cat ci-test-install.sh)"

variables:
  PACK_NAME:
    description: "Name of the package directory inside the git repo"
    value: "helloworld"
  GIT_URL:
    description: "GIT URL"
    value: "https://github.com/zoobab/openwrt_helloworld"
  UPLOAD_SOURCE:
    description: "The source folder to upload artifacts from"
    value: "packages/aarch64_cortex-a53/myrepo/"
    options:
      - "packages/aarch64_cortex-a53/myrepo/"
      - "packages/x86_64/myrepo/"
  UPLOAD_REPO:
    description: "The GitLab generic package repo to push to"
    value: "gitlab.com/api/v4/projects/${GITLAB_USER_NAME}%2Fopenwrtsdkbuild/packages/generic/armvirt_64/0.0.3/"
  SDK_IMAGE:
    description: "SDK Docker Image"
    value: "zoobab/openwrtsdk:21.02.0-rc4-armvirt-64"
    options:
      - "zoobab/openwrtsdk:21.02.0-rc4-sunxi-cortexa53"
      - "zoobab/openwrtsdk:21.02.0-rc4-imx6-generic"
      - "zoobab/openwrtsdk:21.02.0-rc4-bcm27xx-bcm2708"
      - "zoobab/openwrtsdk:21.02.0-rc4-armvirt-64"
      - "zoobab/openwrtsdk:21.02.0-rc4-x86-64"
  DOCKER_PLATFORM:
    description: "The platform that docker should emulate at the install test step"
    value: "linux/aarch64_cortex-a53"
    options:
      - "linux/amd64"
      - "linux/aarch64_generic"
      - "linux/aarch64_cortex-a53"
  OPENWRT_ROOTFS_TAG:
    description: "The rootfs tag from openwrt: https://github.com/openwrt/docker#rootfs-tags, https://hub.docker.com/r/openwrt/rootfs/tags"
    value: "aarch64_cortex-a53-SNAPSHOT"
    options:
      - "x86_64-SNAPSHOT"
      - "i386_pentium4-SNAPSHOT"
      - "i386_pentium-mmx-SNAPSHOT"
      - "arm_cortex-a15_neon-vfpv4-SNAPSHOT"
      - "aarch64_generic-SNAPSHOT"
      - "mips_24kc-SNAPSHOT"
      - "arm_cortex-a9_vfpv3-d16-SNAPSHOT"
      - "aarch64_cortex-a53-SNAPSHOT"
      - "armvirt-64-SNAPSHOT"
  DPKG_ARCH:
   description: "Architecture specification, in debian format"
   value: "arm64"
   options:
     - "amd64"
     - "arm64"
  ARCH:
    description: "Architecture specification, in openwrt format"
    value: "armvirt"
    options:
      - "x86"
      - "armvirt"
  SUBARCH:
    description: "Subarchitecture specification, in openwrt format"
    value: "64"
    options:
      - "64"
      - "32"
